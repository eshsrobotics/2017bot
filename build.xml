<?xml version="1.0" encoding="UTF-8"?>

<project name="FRC Deployment" default="deploy">

        <!--
  The following properties can be defined to override system level
  settings. These should not be touched unless you know what you're
  doing. The primary use is to override the wpilib version when
  working with older robots that can't compile with the latest
  libraries.
  -->

        <!-- By default the system version of WPI is used -->
        <!-- <property name="version" value=""/> -->

        <!-- By default the system team number is used -->
        <!-- <property name="team-number" value=""/> -->

        <!-- By default the target is set to 10.TE.AM.2 -->
        <!-- <property name="target" value=""/> -->

        <!-- Any other property in build.properties can also be overridden. -->

        <property file="${user.home}/wpilib/wpilib.properties"/>
        <property file="build.properties"/>
        <property file="${user.home}/wpilib/java/${version}/ant/build.properties"/>

        <import file="${wpilib.ant.dir}/build.xml"/>

        <property name="classpath" value="lib/TalonSRXLibJava.jar:${lib.path}" />
        <property name="classpath" value="${user.home}/wpilib/java/${version}/lib/WPILib.jar"/>

        <!-- Compile the source ourselves (who neerds Eclipse?)  Include all
             of the WPILib JARs and their dependencies when compiling. -->
        <target name="compile">
            <mkdir dir="${classes.dir}"/>
            <javac srcdir="${src.dir}" destdir="${basedir}/bin">
                <classpath>
                    <fileset dir="${user.home}/wpilib/java/${version}/lib">
                        <include name="*.jar" />
                    </fileset>
                    <fileset dir="${basedir}/lib">
                        <include name="**/*.jar" />
                    </fileset>
                </classpath>
            </javac>
        </target>

        <!--
            Create a new command-line target that must be built
            independently.
        -->
        <target name="create_command_line_jar" depends="compile">
                <jar destfile="${basedir}/bin/TerminalTest.jar"
                     update="true">
                        <manifest>
                                <attribute name="Main-Class" value="org.usfirst.frc.team1759.terminal.TerminalTest"/>
                                <attribute name="Class-Path" value="."/>
                        </manifest>
                        <!--
                            bin/**/*.class are Eclipse's build artifacts.
                            build/**/*.class are Gradle's.

                            It doesn't matter which set we include as long as
                            org/usfirst/frc/team1759/terminal/TerminalTest.class
                            ends up in the JAR file.  Thanks to the
                            update="true" attribute for the jar task, newer
                            class files will overwrite older ones, so it won't
                            matter which build environment you use.
                        -->
                        <fileset erroronmissingdir="false"
                                 dir="${basedir}/bin"
                                 includes="**/*.class"/>
                        <fileset erroronmissingdir="false"
                                 dir="${basedir}/build/classes/main"
                                 includes="**/*.class"/>

                        <!-- Include all of out third-party JAR files' classes
                             in our JAR.

                             Warning: the kinks are not ironed out in this.
                             If you actually try to initialize a robot
                             subsystem, the system will let you (thanks to
                             this task), but you'll get the following run-time
                             error:

                             edu.wpi.first.wpilibj.util.BaseSystemNotInitializedException: The Interface for the HLUsageReporting was never set.

                             I don't know how to fix this, so don't initialize any subsystems.
                        -->
                        <zipgroupfileset dir="${user.home}/wpilib/java/${version}/lib" includes="*.jar"/>
                </jar>
        </target>

</project>
